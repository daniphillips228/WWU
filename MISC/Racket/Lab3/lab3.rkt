(define (member? e L)
    (cond ((null? L)#f)
       ((eq? e (car L))#t)
          (else (member? e (cdr L)) )
    )
)

(define (union L M)
    (remove-duplicates (append L M))
)
  
(define (remove-duplicates)
    (cond ((null? L)'())
       ((member? (car L)(cdr L))
         (remove-duplicates (cdr L)))
       (else (cons (car L)(remove-duplicates (cdr L))))
    )
)

(define (intersection L M)
    (cond ( (null? L)'())
          ( (member? (car L) M)
            (cons (car L)
                  (intersection (cdr L) M)))
          (else (intersection(cdr L) M))
          )
)

(define (difference L M)
    (cond ( (null? L)'())
          ( (member? (car L) M)
            (difference(cdr L) M)
          )
          (else (cons (car L)
                  (difference (cdr L) M))
          )
    )
)

(define (symmetric-difference L M)
	(append (difference L M) (difference M L))
)
